name: Targeted ESLint Scan for LWC & Aura (Commit Based)

on:
  workflow_dispatch:
    inputs:
      userStoryId:
        required: false
      userStoryCommitId:
        required: false
      commitId:
        required: true

jobs:
  eslint-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.commitId }}  # Checkout the specific commit

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install ESLint & Salesforce Rules
        run: |
          npm init -y
          npm install --save-dev eslint@^8.57.0 @salesforce/eslint-config-lwc@^3.7.1 @lwc/eslint-plugin-lwc@^2.0.0
          sudo apt-get update && sudo apt-get install -y jq

      - name: Create .eslintrc.json
        run: |
          cat <<EOF > .eslintrc.json
          {
            "extends": ["@salesforce/eslint-config-lwc/recommended"],
            "plugins": ["@lwc/lwc"],
            "env": {
              "browser": true,
              "es2021": true,
              "node": true
            }
          }
          EOF

      - name: Extract Changed Lines
        run: |
          mkdir -p results
          echo "ðŸ“¤ Extracting changed lines for commit: ${{ github.event.inputs.commitId }}"
          git show --unified=0 -w ${{ github.event.inputs.commitId }} | awk '
            /^diff --git/ {
              if (filename) print "";
              filename = $3;
              sub("a/", "", filename);
              if (filename ~ /\.js$/) {  # ADD THIS FILTER
                print "FILE:" filename
              } else {
                filename = ""  # Skip non-JS files
              }
            }
            /^@@/ {
              if (filename == "") next;  # Skip lines for non-JS files
              match($0, /\+([0-9]+)(,([0-9]+))?/, m);
              start = m[1];
              count = m[3] ? m[3] : 1;
              for (i = 0; i < count; i++) print "LINE:" start + i
            }
          ' > results/changed_lines.txt

          echo "ðŸ“„ ==== Changed Lines ===="
          cat results/changed_lines.txt

      - name: Lint & Filter Violations on Changed Lines
        run: |
          echo "Starting linting process..."

          declare -A file_line_map
          current_file=""
          while read -r line; do
            if [[ "$line" == FILE:* ]]; then
              current_file="${line#FILE:}"
              file_line_map["$current_file"]=""
            elif [[ "$line" == LINE:* ]]; then
              file_line_map["$current_file"]+="${line#LINE:} "
            fi
          done < results/changed_lines.txt
      
          echo "Changed files and lines:"
          for f in "${!file_line_map[@]}"; do
            echo "$f -> ${file_line_map[$f]}"
          done
      
          # Initialize temporary file for all violations
          echo -n > all_violations.json
      
          for file in "${!file_line_map[@]}"; do
            [[ -f "$file" ]] || { echo "Skipping non-existent file: $file"; continue; }
      
            echo "Linting $file..."
            npx eslint "$file" -f json > temp.json || true
      
            IFS=' ' read -r -a changed <<< "${file_line_map[$file]}"
            # Convert changed lines to NUMBERS for jq comparison
            changed_json=$(printf '%s\n' "${changed[@]}" | jq -Rn '[inputs | tonumber]')
      
            echo "Filtering violations for changed lines..."
            # Process temp.json and collect into all_violations.json
            jq --argjson changed "$changed_json" '
              .[] |
              del(.source) |
              .messages |= map(select(.line as $line | $changed | index($line))) |
              select(.messages | length > 0)
            ' temp.json >> all_violations.json
          done
      
          # Convert collected violations into a valid JSON array
          jq -s '.' all_violations.json > results/output.json
      
          echo "Filtered violations:"
          cat results/output.json

      - name: Prepare Payload for Salesforce
        run: |
          jq -n \
            --arg userStoryId "${{ github.event.inputs.userStoryId }}" \
            --arg userStoryCommitId "${{ github.event.inputs.userStoryCommitId }}" \
            --arg commitId "${{ github.event.inputs.commitId }}" \
            --arg run_id "${{ github.run_id }}" \
            --slurpfile violations results/output.json \
            '{
              userStoryId: $userStoryId,
              userStoryCommitId: $userStoryCommitId,
              commitId: $commitId,
              run_id: $run_id,
              violations: $violations[0]
            }' > payload.json

          echo "Payload content:"
          cat payload.json

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: eslint-violations
          path: payload.json
          
      # - name: Get Salesforce Access Token
      #   id: get_sf_access_token
      #   run: |
      #     response=$(curl -s -X POST -d "grant_type=password" \
      #       -d "client_id=${{ secrets.SF_CONSUMER_KEY }}" \
      #       -d "client_secret=${{ secrets.SF_CONSUMER_SECRET }}" \
      #       -d "username=${{ secrets.SF_USERNAME }}" \
      #       -d "password=${{ secrets.SF_PASSWORD }}${{ secrets.SF_SECURITY_TOKEN }}" \
      #       https://login.salesforce.com/services/oauth2/token)
      #     echo "ACCESS_TOKEN=$(echo $response | jq -r .access_token)" >> $GITHUB_ENV

      # - name: Send Payload to Salesforce
      #   run: |
      #     curl -X POST \
      #     -H "Content-Type: application/json" \
      #     -H "Authorization: Bearer $ACCESS_TOKEN" \
      #       -d @payload.json \
      #       "https://accdevops23.my.salesforce.com/services/apexrest/github/eslintWebhook"
