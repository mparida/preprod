name: Targeted SFDX Scanner Scan (Commit Based)

on:
  workflow_dispatch:
    inputs:
      userStoryId:
        required: false
      userStoryCommitId:
        required: false
      commitId:
        required: true

jobs:
  sfdx-scanner-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.commitId }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Salesforce CLI and Scanner
        run: |
          # Install specific matching versions
          npm install --global @salesforce/cli@latest
          sf plugins install @salesforce/plugin-code-analyzer@latest
          sudo apt-get update && sudo apt-get install -y jq
          sf --version
          sf plugins --core

      - name: Configure Scanner Rules
        run: |
          # Create a basic rules configuration if none exists
          if [ ! -f sfdx-scanner-config.json ]; then
            echo '{
              "rules": {
                "pmd": {
                  "rulesets": [
                    "category/apex/security.xml",
                    "category/apex/performance.xml",
                    "category/apex/bestpractices.xml"
                  ]
                }
              },
              "engines": {
                "eslint": {
                  "auto_discover_eslint_config": true
                }
              }
            }' > sfdx-scanner-config.json
          fi

      - name: Extract Changed Lines
        run: |
          mkdir -p results
          echo "ðŸ“¤ Extracting changed lines for commit: ${{ github.event.inputs.commitId }}"
          git show --unified=0 -w ${{ github.event.inputs.commitId }} | awk '
            /^diff --git/ {
              if (filename) print "";
              filename = $3;
              sub("a/", "", filename);
              if (filename ~ /\.(cls|trigger|js|html|cmp|app|page|evt|design|tokens|auradoc|svg|css)$/) {
                print "FILE:" filename
              } else {
                filename = ""
              }
            }
            /^@@/ {
              if (filename == "") next;
              match($0, /\+([0-9]+)(,([0-9]+))?/, m);
              start = m[1];
              count = m[3] ? m[3] : 1;
              for (i = 0; i < count; i++) print "LINE:" start + i
            }
          ' > results/changed_lines.txt

      - name: Run SFDX Scanner on Changed Lines
        run: |
          declare -A file_line_map
          current_file=""
          while read -r line; do
            if [[ "$line" == FILE:* ]]; then
              current_file="${line#FILE:}"
              file_line_map["$current_file"]=""
            elif [[ "$line" == LINE:* ]]; then
              file_line_map["$current_file"]+="${line#LINE:} "
            fi
          done < results/changed_lines.txt

          echo -n > all_violations.json

          for file in "${!file_line_map[@]}"; do
            [[ -f "$file" ]] || continue
            
            echo "Scanning $file with lines: ${file_line_map[$file]}..."
            sf scanner run \
              --target "$file" \
              --format json \
              --outfile temp.json || true
          
            [[ -f temp.json ]] || continue

            IFS=' ' read -r -a changed <<< "${file_line_map[$file]}"
            changed_json=$(printf '%s\n' "${changed[@]}" | jq -Rn '[inputs | tonumber]')

            # Process violations with line number checking
            jq --argjson changed "$changed_json" '
              if (.result? | type == "array") then
                .result[] | 
                {
                  filePath: .filePath,
                  violations: [.violations[] | select(.line as $line | $changed | index($line))]
                } |
                select(.violations | length > 0)
              else
                empty
              end
            ' temp.json >> all_violations.json
          done

          # Create valid JSON array (empty array if no violations)
          if [ -s all_violations.json ]; then
            jq -s '.' all_violations.json > results/output.json
          else
            echo '[]' > results/output.json
          fi

      - name: Prepare Payload
        run: |
          jq -n \
            --arg userStoryId "${{ github.event.inputs.userStoryId }}" \
            --arg userStoryCommitId "${{ github.event.inputs.userStoryCommitId }}" \
            --arg commitId "${{ github.event.inputs.commitId }}" \
            --arg run_id "${{ github.run_id }}" \
            --slurpfile violations results/output.json \
            '{
              userStoryId: $userStoryId,
              userStoryCommitId: $userStoryCommitId,
              commitId: $commitId,
              run_id: $run_id,
              violations: $violations[0]
            }' > payload.json

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sfdx-scanner-violations
          path: payload.json
