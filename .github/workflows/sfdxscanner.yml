name: Targeted SFDX Scanner Scan (Commit Based)

on:
  workflow_dispatch:
    inputs:
      userStoryId:
        required: false
      userStoryCommitId:
        required: false
      commitId:
        required: true

jobs:
  sfdx-scanner-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.commitId }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Salesforce CLI and Code Analyzer v5.1.0
        run: |
          npm install --global @salesforce/cli@latest
          sf plugins install @salesforce/plugin-code-analyzer@5.1.0
          sudo apt-get update && sudo apt-get install -y jq
          sf --version
          sf plugins --core

      - name: Extract Changed Lines
        run: |
          mkdir -p results
          echo "Extracting changed lines for commit: ${{ github.event.inputs.commitId }}"
          git show --unified=0 -w ${{ github.event.inputs.commitId }} | awk '
            /^diff --git/ {
              if (filename) print "";
              filename = $3;
              sub("a/", "", filename);
              if (filename ~ /\.(cls|trigger|js)$/) {
                print "FILE:" filename
              } else {
                filename = ""
              }
            }
            /^@@/ {
              if (filename == "") next;
              match($0, /\+([0-9]+)(,([0-9]+))?/, m);
              start = m[1];
              count = m[3] ? m[3] : 1;
              for (i = 0; i < count; i++) print "LINE:" start + i
            }
          ' > results/changed_lines.txt

      - name: Verify Config File Exists
        run: |
          echo "Listing contents of root directory:"
          ls -la
          echo "Content of scanner-run-config.yml (if exists):"
          cat scanner-run-config.yml || echo "scanner-run-config.yml not found"

      - name: Run Code Analyzer Once
        run: |
          mkdir -p debug
          sf code-analyzer run --config-file ./scanner-run-config.yml > debug/full_scan.json

      - name: Filter Violations by Changed Lines
        run: |
          echo "[]" > results/output.json
          echo "[]" > debug/filtered.json

          current_file=""
          changed_lines=()
          while read -r line; do
            if [[ "$line" == FILE:* ]]; then
              if [[ -n "$current_file" && ${#changed_lines[@]} -gt 0 ]]; then
                changed_json=$(printf '%d\n' "${changed_lines[@]}" | jq -s '.')
                jq --arg path "$current_file" --argjson changed "$changed_json" '
                  map(select(.filePath == $path)) | .[] | {
                    filePath: $path,
                    violations: [
                      .violations[] | select((.line | tonumber) as $line | $changed | index($line) != null)
                    ]
                  } | select(.violations | length > 0)
                ' debug/full_scan.json >> debug/filtered.json
              fi
              current_file="${line#FILE:}"
              changed_lines=()
            elif [[ "$line" == LINE:* ]]; then
              changed_lines+=("${line#LINE:}")
            fi
          done < results/changed_lines.txt

          if [[ -n "$current_file" && ${#changed_lines[@]} -gt 0 ]]; then
            changed_json=$(printf '%d\n' "${changed_lines[@]}" | jq -s '.')
            jq --arg path "$current_file" --argjson changed "$changed_json" '
              map(select(.filePath == $path)) | .[] | {
                filePath: $path,
                violations: [
                  .violations[] | select((.line | tonumber) as $line | $changed | index($line) != null)
                ]
              } | select(.violations | length > 0)
            ' debug/full_scan.json >> debug/filtered.json
          fi

          if [[ -s debug/filtered.json ]]; then
            jq -c '.' debug/filtered.json > debug/filtered_line.json
            jq -s '.' debug/filtered_line.json > results/output.json
          else
            echo "[]" > results/output.json
          fi

      - name: Debug Output Files
        run: |
          echo "=== Changed Lines ==="
          cat results/changed_lines.txt
          echo "=== Output JSON ==="
          cat results/output.json || echo "No output.json found"
          echo "=== Payload JSON ==="
          cat payload.json || echo "No payload.json found"

      - name: Prepare Payload
        run: |
          jq -n \
            --arg userStoryId "${{ github.event.inputs.userStoryId }}" \
            --arg userStoryCommitId "${{ github.event.inputs.userStoryCommitId }}" \
            --arg commitId "${{ github.event.inputs.commitId }}" \
            --arg run_id "${{ github.run_id }}" \
            --slurpfile violations results/output.json \
            '{
              userStoryId: $userStoryId,
              userStoryCommitId: $userStoryCommitId,
              commitId: $commitId,
              run_id: $run_id,
              violations: $violations[0]
            }' > payload.json

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sfdx-scanner-violations
          path: payload.json
