name: Targeted SFDX Scanner Scan (Commit Based) 

on:
  workflow_dispatch:
    inputs:
      userStoryId:
        required: false
      userStoryCommitId:
        required: false
      commitId:
        required: true

jobs:
  sfdx-scanner-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.commitId }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Salesforce CLI and Scanner
        run: |
          # Install specific matching versions
          npm install --global @salesforce/cli@latest
          sf plugins install @salesforce/plugin-code-analyzer@latest
          sudo apt-get update && sudo apt-get install -y jq
          sf --version
          sf plugins --core

      - name: Configure Scanner Rules
        run: |
          # Create a basic rules configuration if none exists
          if [ ! -f sfdx-scanner-config.json ]; then
            echo '{
              "rules": {
                "pmd": {
                  "rulesets": [
                    "category/apex/security.xml",
                    "category/apex/performance.xml",
                    "category/apex/bestpractices.xml"
                  ]
                }
              },
              "engines": {
                "eslint": {
                  "auto_discover_eslint_config": true
                }
              }
            }' > sfdx-scanner-config.json
          fi

      - name: Extract Changed Lines
        run: |
          mkdir -p results
          echo "ðŸ“¤ Extracting changed lines for commit: ${{ github.event.inputs.commitId }}"
          git show --unified=0 -w ${{ github.event.inputs.commitId }} | awk '
            /^diff --git/ {
              if (filename) print "";
              filename = $3;
              sub("a/", "", filename);
              if (filename ~ /\.(cls|trigger|js|html|cmp|app|page|evt|design|tokens|auradoc|svg|css)$/) {
                print "FILE:" filename
              } else {
                filename = ""
              }
            }
            /^@@/ {
              if (filename == "") next;
              match($0, /\+([0-9]+)(,([0-9]+))?/, m);
              start = m[1];
              count = m[3] ? m[3] : 1;
              for (i = 0; i < count; i++) print "LINE:" start + i
            }
          ' > results/changed_lines.txt

      - name: Run SFDX Scanner on Changed Lines
        run: |
          # Create a directory for debug files
          mkdir -p debug
      
          # Save the changed lines for reference
          cp results/changed_lines.txt debug/changed_lines.txt
      
          # Process each changed file
          echo "[]" > results/output.json  # Initialize empty array
      
          while read -r line; do
            if [[ "$line" == FILE:* ]]; then
              current_file="${line#FILE:}"
              changed_lines=()
            elif [[ "$line" == LINE:* ]]; then
              changed_lines+=("${line#LINE:}")
            fi
      
            # When we hit a blank line or end of file, process the accumulated file
            if [[ -z "$line" || ! -z "$current_file" && -z "$line" ]] || [[ "$line" == FILE:* && ! -z "$current_file" ]]; then
              if [[ -f "$current_file" && ${#changed_lines[@]} -gt 0 ]]; then
                echo "Processing $current_file with lines: ${changed_lines[*]}"
      
                # Run scanner
                sf scanner run --target "$current_file" --format json --outfile "debug/${current_file//\//_}.json"
      
                # Create line filter pattern
                line_filter=$(IFS=,; echo "${changed_lines[*]}")
                
                # Filter violations using direct line matching
                jq --arg lines "$line_filter" '
                  if (.violations? | type == "array") then
                    {
                      filePath: input_filename,
                      violations: [.violations[] | select(
                        (.line | tostring) as $line |
                        ($lines | split(",") | index($line)) != null
                      )]
                    } |
                    select(.violations | length > 0)
                  else
                    empty
                  end
                ' "debug/${current_file//\//_}.json" >> debug/filtered.json
              fi
            fi
          done < results/changed_lines.txt
      
          # Process the last file if needed
          if [[ -f "$current_file" && ${#changed_lines[@]} -gt 0 ]]; then
            echo "Processing last file $current_file with lines: ${changed_lines[*]}"
            sf scanner run --target "$current_file" --format json --outfile "debug/${current_file//\//_}.json"
            
            line_filter=$(IFS=,; echo "${changed_lines[*]}")
            jq --arg lines "$line_filter" '
              if (.violations? | type == "array") then
                {
                  filePath: input_filename,
                  violations: [.violations[] | select(
                    (.line | tostring) as $line |
                    ($lines | split(",") | index($line)) != null
                  )]
                } |
                select(.violations | length > 0)
              else
                empty
              end
            ' "debug/${current_file//\//_}.json" >> debug/filtered.json
          fi
      
          # Combine results if any were found
          if [[ -f debug/filtered.json ]]; then
            jq -s '.' debug/filtered.json > results/output.json
          fi
      
          # Debug output
          echo "=== Debug Information ==="
          echo "Changed lines:"
          cat results/changed_lines.txt
          echo -e "\nScanner outputs:"
          ls -la debug/
          echo -e "\nFiltered violations:"
          cat debug/filtered.json || echo "No filtered violations found"
          echo -e "\nFinal output:"
          cat results/output.json
      
      - name: Debug Output Files
        run: |
          echo "=== Changed Lines ==="
          cat results/changed_lines.txt
          echo "=== All Violations ==="
          cat all_violations.json || echo "No all_violations.json found"
          echo "=== Output JSON ==="
          cat results/output.json || echo "No output.json found"
          echo "=== Payload JSON ==="
          cat payload.json || echo "No payload.json found"

      - name: Prepare Payload
        run: |
          jq -n \
            --arg userStoryId "${{ github.event.inputs.userStoryId }}" \
            --arg userStoryCommitId "${{ github.event.inputs.userStoryCommitId }}" \
            --arg commitId "${{ github.event.inputs.commitId }}" \
            --arg run_id "${{ github.run_id }}" \
            --slurpfile violations results/output.json \
            '{
              userStoryId: $userStoryId,
              userStoryCommitId: $userStoryCommitId,
              commitId: $commitId,
              run_id: $run_id,
              violations: $violations[0]
            }' > payload.json

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sfdx-scanner-violations
          path: payload.json
