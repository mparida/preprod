name: Targeted SFDX Scanner Scan (Commit Based) 

on:
  workflow_dispatch:
    inputs:
      userStoryId:
        required: false
      userStoryCommitId:
        required: false
      commitId:
        required: true

jobs:
  sfdx-scanner-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.commitId }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Salesforce CLI and Scanner
        run: |
          # Install specific matching versions
          npm install --global @salesforce/cli@latest
          sf plugins install @salesforce/plugin-code-analyzer@latest
          sudo apt-get update && sudo apt-get install -y jq
          sf --version
          sf plugins --core

      - name: Configure Scanner Rules
        run: |
          # Create a basic rules configuration if none exists
          if [ ! -f sfdx-scanner-config.json ]; then
            echo '{
              "rules": {
                "pmd": {
                  "rulesets": [
                    "category/apex/security.xml",
                    "category/apex/performance.xml",
                    "category/apex/bestpractices.xml"
                  ]
                }
              },
              "engines": {
                "eslint": {
                  "auto_discover_eslint_config": true
                }
              }
            }' > sfdx-scanner-config.json
          fi

      - name: Extract Changed Lines
        run: |
          mkdir -p results
          echo "ðŸ“¤ Extracting changed lines for commit: ${{ github.event.inputs.commitId }}"
          git show --unified=0 -w ${{ github.event.inputs.commitId }} | awk '
            /^diff --git/ {
              if (filename) print "";
              filename = $3;
              sub("a/", "", filename);
              if (filename ~ /\.(cls|trigger|js|html|cmp|app|page|evt|design|tokens|auradoc|svg|css)$/) {
                print "FILE:" filename
              } else {
                filename = ""
              }
            }
            /^@@/ {
              if (filename == "") next;
              match($0, /\+([0-9]+)(,([0-9]+))?/, m);
              start = m[1];
              count = m[3] ? m[3] : 1;
              for (i = 0; i < count; i++) print "LINE:" start + i
            }
          ' > results/changed_lines.txt

      - name: Run SFDX Scanner on Changed Lines
        run: |
          # Create debug directory
          mkdir -p debug
          
          # Process changed files
          echo "[]" > results/output.json
          
          current_file=""
          while read -r line; do
            if [[ "$line" == FILE:* ]]; then
              # Process previous file if exists
              if [[ -n "$current_file" && -f "$current_file" ]]; then
                echo "Processing $current_file with lines: ${changed_lines[*]}"
                
                # Run scanner and save raw output
                sf scanner run --target "$current_file" --format json --outfile "debug/raw_${current_file//\//_}.json"
                
                # Convert changed lines to JSON array
                changed_json=$(printf '%d\n' "${changed_lines[@]}" | jq -s '.')
                
                # Extract violations matching our lines (UPDATED APPROACH)
                jq --argjson changed "$changed_json" '
                  # The structure might be different in v4.x - check if results exists
                  if (.results? | type) == "array" then
                    # v4.x format - violations are inside each result
                    {
                      filePath: input_filename,
                      violations: [.results[].violations[] | select(
                        (.line | tonumber) as $line |
                        $changed | index($line) != null
                      )]
                    }
                  elif (.violations? | type) == "array" then
                    # Alternative format - violations at top level
                    {
                      filePath: input_filename,
                      violations: [.violations[] | select(
                        (.line | tonumber) as $line |
                        $changed | index($line) != null
                      )]
                    }
                  else
                    empty
                  end |
                  select(.violations | length > 0)
                ' "debug/raw_${current_file//\//_}.json" >> debug/filtered.json
              fi
              
              # Start new file
              current_file="${line#FILE:}"
              changed_lines=()
            elif [[ "$line" == LINE:* ]]; then
              changed_lines+=("${line#LINE:}")
            fi
          done < results/changed_lines.txt
          
          # Process last file
          if [[ -n "$current_file" && -f "$current_file" && ${#changed_lines[@]} -gt 0 ]]; then
            echo "Processing last file $current_file with lines: ${changed_lines[*]}"
            sf scanner run --target "$current_file" --format json --outfile "debug/raw_${current_file//\//_}.json"
            
            changed_json=$(printf '%d\n' "${changed_lines[@]}" | jq -s '.')
            jq --argjson changed "$changed_json" '
              if (.results? | type) == "array" then
                {
                  filePath: input_filename,
                  violations: [.results[].violations[] | select(
                    (.line | tonumber) as $line |
                    $changed | index($line) != null
                  )]
                }
              elif (.violations? | type) == "array" then
                {
                  filePath: input_filename,
                  violations: [.violations[] | select(
                    (.line | tonumber) as $line |
                    $changed | index($line) != null
                  )]
                }
              else
                empty
              end |
              select(.violations | length > 0)
            ' "debug/raw_${current_file//\//_}.json" >> debug/filtered.json
          fi
          
          # Combine results
          if [[ -f debug/filtered.json ]]; then
            jq -s 'add' debug/filtered.json > results/output.json
          fi
          
          # Debug output
          echo "=== FINAL DEBUG OUTPUT ==="
          echo "Changed lines:"
          cat results/changed_lines.txt
          echo -e "\nRaw scanner output for AccountService:"
          cat "debug/raw_force-app_main_default_classes_AccountService.cls.json" || echo "No raw output"
          echo -e "\nFiltered violations:"
          cat debug/filtered.json || echo "No filtered violations"
          echo -e "\nFinal output.json:"
          cat results/output.json
      
      - name: Debug Output Files
        run: |
          echo "=== Changed Lines ==="
          cat results/changed_lines.txt
          echo "=== All Violations ==="
          cat all_violations.json || echo "No all_violations.json found"
          echo "=== Output JSON ==="
          cat results/output.json || echo "No output.json found"
          echo "=== Payload JSON ==="
          cat payload.json || echo "No payload.json found"

      - name: Prepare Payload
        run: |
          jq -n \
            --arg userStoryId "${{ github.event.inputs.userStoryId }}" \
            --arg userStoryCommitId "${{ github.event.inputs.userStoryCommitId }}" \
            --arg commitId "${{ github.event.inputs.commitId }}" \
            --arg run_id "${{ github.run_id }}" \
            --slurpfile violations results/output.json \
            '{
              userStoryId: $userStoryId,
              userStoryCommitId: $userStoryCommitId,
              commitId: $commitId,
              run_id: $run_id,
              violations: $violations[0]
            }' > payload.json

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sfdx-scanner-violations
          path: payload.json
